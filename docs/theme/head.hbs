<!--JQuery-->
<script
 type="text/javascript"
 src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"
>
</script>

<!--Rison encoding/decoding to pass code to the compiler explorer embedded iframe-->
<script
 type="text/javascript"
 src="https://cdn.jsdelivr.net/gh/Nanonid/rison@917679fb6cafa15e2a186cd5a47163792899b321/js/rison.js"
>
</script>
<script type="text/javascript">
 function risonEncode(obj) {
  return rison.quote(rison.encode_object(obj));
 }

 function risonDecode(text) {
  return rison.decode_object(decodeURIComponent(text.replace(/\+/g, '%20')));
 }
</script>

<!--Force all tables to span the full page width-->
<style>
 table {
  width: 100%;
 }
</style>

<!--Styling for custom links-->
<style>
 a#custom-link {
  text-decoration-line: none;
  color: currentcolor;
 }
 a#custom-link:hover {
  color: var(--links);
 }
</style>

<!--Styling for constructor description ordered lists-->
<style>
 ol[id^="constructor-list-"] {
  list-style: none;
  counter-reset: styled-counter;
 }
 ol[id^="constructor-list-"] > li {
  counter-increment: styled-counter;
 }
 ol[id^="constructor-list-"] > li::before {
  content: counter(styled-counter) ") ";
  color: var(--fg);
  font-weight: bold;
  position: absolute;
  text-indent: -25px;
 }
 ol[id^="constructor-list-"] > li:target::before {
  content: "»  " counter(styled-counter) ") ";
  /*margin-left: -13.5px;*/
  margin-left: -1.5ch;
 }
</style>

<!--Transformer for constructor definition tables and constructor lists-->
<script type="text/javascript">
 $(function() {
  $(`table[id^=constructor-table-]`)
   .each(function(table_index) {
    const constructorTableIndex = table_index + 1;

    //Transform constructor description list
    $(`ol#constructor-list-${constructorTableIndex} > li`)
     .each(function(list_index) {
      //Add the id for each constructor description to each entry in the
      //list for this constructor table
      $(this)
       .attr(`id`, `constructor-${constructorTableIndex}-${list_index + 1}`);
     });

     //Transform constructor definition table
     $(this)
      .find(`tbody > tr`)
      .each(function(constructor_index) {
       //Add column with link to description
       $(this)
        .append(`
         <td>
          <a id="custom-link" href="#constructor-${constructorTableIndex}-${constructor_index + 1}">
           (${constructor_index + 1})
          </a>
         </td>
        `);

       //Add element to disable code example
       $(this)
        .find(`td > pre`)
        .parent()
        .prepend(`<p><area id="no-interactive-code"></area></p>`);
      });
   });
 });
</script>

<!--Styling for nested member function definition tables-->
<style>
 table[id^="member-function-definition-"] {
  border-collapse: collapse;
  border: hidden;
 }
 td[id^="member-function-"] {
  position: relative;
  width: 1px;
  border: hidden;
 }
 td[id^="member-function-"]:target > a::before {
  content: "» ";
  margin-left: -1.325ch;
 }
</style>

<!--Transformer for member function definition tables-->
<script type="text/javascript">
 $(function() {
  //Add element to disable running first code example and
  //put the code example in a table
  $(`table#member-function-table`)
   .each(function(table_index) {
    $(this)
     .find(`tbody > tr`)
     .each(function(member_function_index) {
      const function_index = member_function_index + 1;
      $(this)
       .find(`td`)
       .each(function(unused) {
        //Get the original code example
        const codeElement = $(this)
         .find(`pre > code`)
         .first()
         .parent();

        //Create new code element
        const newCodeElement = $(`
         <table id="member-function-definition-${table_index}">
          <td id="member-function-${table_index}-${function_index}">
           <a id="custom-link" href="#member-function-${table_index}-${function_index}">
            (${function_index})
           </a>
          </td>
          <td>
           <p><area id="no-interactive-code"></area></p>
           <pre>${codeElement.html()}</pre>
          </td>
         </table>
        `);

        //Add new code element to parent
        $(this)
         .prepend(newCodeElement);

        //Remove old code example
        codeElement.remove();
       });
     });
   });
 });
</script>

<!--Styling for embedded complier explorer iframes-->
<style>
 [id^="godbolt-"] {
  position: relative;
  width: 100%;
 }
</style>

<!--Function to handle replacement of headers for interactive examples-->
<script type="text/javascript">
 function findIncludes(exampleCode) {
  const includeRegex = /\#include\s*\<cx\/.*.h\>/g;
  var includedHeaders = [];

  //Find all headers
  {
   var match;
   do {
    match = includeRegex.exec(exampleCode);
    if (match) {
     includedHeaders.push(match[0]);
    }
   } while (match);
  }

  return includedHeaders;
 }

 function removeInclude(exampleCode, include) {
  return exampleCode.replaceAll(
   `\#include\w*\<cx\/#{include}>`,
   ""
  );
 }

 function getIncludeInfo(include) {
  const rawContentLink = "https://raw.githubusercontent.com/Matthewacon/CX/main/include/cx";
  const headerRegex = /\w+.h/g;
  //Get header from include
  var header; {
   const match = headerRegex.exec(include);
   if (match) {
    header = match[0];
   }
  }

  //Construct raw github content link
  if (header) {
   const link = `${rawContentLink}/${header}`;
   return {
    header: header,
    origInclude: include,
    newInclude: `#include <${link}>`,
    link: link
   };
  }

  return undefined;
 }

 function formatCodeExample(exampleCode) {
  var processedHeaders = [];

  function headerAlreadyProcessed(header) {
   for (const processedHeader of processedHeaders) {
    if (processedHeader.header === header) {
     return true;
    }
   }
   return false;
  }

  function transformIncludes(src, depth = 0) {
   const includes = findIncludes(src);
   for (var i = 0; i < includes.length; i++) {
    const include = includes[i];
    //Get header info for include
    const includeInfo = getIncludeInfo(include);
    if (!includeInfo) {
     console.error(
      `Error in example: could not find header '${include}'`
     );
     return undefined;
    }

    //Skip header if it has already been processed
    if (headerAlreadyProcessed(includeInfo.header)) {
     //Remove already-processed dependent header
     src = src.replace(
      `${includeInfo.origInclude}\n`,
      ""
     );
     console.log(`Skipping already processed header: '${includeInfo.header}'`);
    } else {
     console.log(`Processing header: ${includeInfo.header}`);

     //Get header content from github
     const request = new XMLHttpRequest();
     request.open("GET", includeInfo.link, false);
     request.send(null);
     if (request.status != 200) {
      console.error(
       `Error in example: could not find header '${include}' at link ${includeInfo.link}\n`
      );
      return undefined;
     }
     const header = request.responseText;

     //Adds begin example comment
     function addExampleComment(str) {
      if (depth == 0 && i == includes.length - 1) {
       return `${str}\n//BEGIN EXAMPLE`;
      }
      return str;
     }

     //Deal with dependent includes
     const headerIncludes = findIncludes(header);
     processedHeaders.push({
      header: includeInfo.header,
      src: src
     });
     if (headerIncludes.length != 0) {
      console.log(`Substituting transformed header for include [${depth}]: ${includeInfo.origInclude}`);
      var transformed = transformIncludes(header, depth + 1);
      if (!transformed) {
       return undefined;
      }

      //If the header contains a `#pragma once` declaration, remove it
      transformed = transformed.replaceAll(
       /#pragma\s+once\n*/g,
       ""
      );

      //Add comments before and after header to mark it out
      transformed = `//BEGIN: ${includeInfo.origInclude}\n${transformed}\n//END: ${includeInfo.origInclude}`;

      //Parse and transform dependent includes in `header`,
      //and substitute transformed header for the original include
      src = src.replace(
       includeInfo.origInclude,
       addExampleComment(transformed)
      );
     } else {
      console.log(`Substituting raw link for include [${depth}]: ${includeInfo.origInclude}`);

      //Substitute the original include for the raw link
      src = src.replace(
       includeInfo.origInclude,
       addExampleComment(
        `//BEGIN: ${includeInfo.origInclude}\n${includeInfo.newInclude}\n//END: ${includeInfo.origInclude}`
       )
      );
     }
    }
   }

   return src;
  }

  //If the code example does not contain a main function,
  //add one so the example will run
  var newCode = transformIncludes(exampleCode);
  const hasMain = /int\s+main\s*\(/g;
  if (!hasMain.test(newCode)) {
   newCode += `\nint main() {}\n`;
  }
  return newCode;
 }
</script>

<!--Adds button to reveal embedded compiler explorer iframe-->
<script type="text/javascript">
 const godboltEmbeddedRequest = {
  "g": [
   {
    "g": [
     {
      "g": [
       {
        "h": "codeEditor",
        "i": {
         "fontScale": 11,
         "fontUsePx": "0",
         "j": 1,
         "lang": "c++",
         "selection": {
          "endColumn": 1,
          "endLineNumber": 1,
          "positionColumn": 1,
          "positionLineNumber": 1,
          "selectionStartColumn": 1,
          "selectionStartLineNumber": 1,
          "startColumn": 1,
          "startLineNumber": 1
         },
         "source": "REPLACEME"
        },
        "l": "5",
        "n": "0",
        "o": "C++ source #1",
        "t": "0"
       }
      ],
      "k": 50,
      "l": "4",
      "n": "0",
      "o": "",
      "s": 0,
      "t": "0"
     },
     {
      "g": [
       {
        "g": [
         {
          "h": "compiler",
          "i": {
           "compiler": "clang_trunk",
           "filters": {
            "b": "0",
            "binary": "1",
            "commentOnly": "0",
            "demangle": "0",
            "directives": "0",
            "execute": "0",
            "intel": "0",
            "libraryCode": "0",
            "trim": "1"
           },
           "fontScale": 11,
           "fontUsePx": "0",
           "j": 1,
           "lang": "c++",
           "libs": [],
           "options": "-std=c++20 -Wno-pragma-once-outside-header",
           "selection": {
            "endColumn": 1,
            "endLineNumber": 1,
            "positionColumn": 1,
            "positionLineNumber": 1,
            "selectionStartColumn": 1,
            "selectionStartLineNumber": 1,
            "startColumn": 1,
            "startLineNumber": 1
           },
           "source": 1
          },
          "l": "5",
          "n": "0",
          "o": "x86-64 clang (trunk) (Editor #1, Compiler #1) C++",
          "t": "0"
         }
        ],
        "k": 50,
        "l": "4",
        "m": 50,
        "n": "0",
        "o": "",
        "s": 0,
        "t": "0"
       },
       {
        "g": [
         {
          "h": "output",
          "i": {
           "compiler": 1,
           "editor": 1,
           "fontScale": 11,
           "fontUsePx": "0",
           "wrap": "1"
          },
          "l": "5",
          "n": "0",
          "o": "#1 with x86-64 clang (trunk)",
          "t": "0"
         }
        ],
        "header": {},
        "l": "4",
        "m": 50,
        "n": "0",
        "o": "",
        "s": 0,
        "t": "0"
       }
      ],
      "k": 50,
      "l": "3",
      "n": "0",
      "o": "",
      "t": "0"
     }
    ],
    "l": "2",
    "n": "0",
    "o": "",
    "t": "0"
   }
  ],
  "version": 4
 };
 $(function() {
  $('pre > div.buttons')
   .each(function(index) {
    const parent = this;
    //If the parent contains an adjacent `<area class="no-interactive-code">`
    //element, do not add a run button
    const shouldSkip = $(this)
     .parent('pre')
     .prev('p')
     .find('area#no-interactive-code')
     .length != 0;

    if (!shouldSkip) {
     //Add button
     const button = $(`<button class="fa fa-play play-button" title="Run this code" aria-label="Run this code" id="code-button-${index}"></button>`);
     button.appendTo(this);

     //Get code element
     const codeElement = $(parent)
      .parent('pre')
      .children('code');

     //Get code from code element
     const exampleCode = codeElement.text();

     //Get the pixel height of the code element and calculate
     //the new height of the iframe
     const codeHeight = codeElement.height();
     const pageHeight = window.innerHeight;
     const newHeight = Math.floor(
      Math.max(
       Math.min(codeHeight, 0.3 * pageHeight),
       0.3 * pageHeight
      )
     );

     //Add styling for compiler explorer iframe
     $(`head`)
      .append(`<style> [id="godbolt-${index}"] { height: ${newHeight}px; }</style>`);

     //Add parent replacement on button click
     button.click(function() {
      //Encode code for godbolt request
      var request = godboltEmbeddedRequest;
      const originalExample = codeElement.text();
      var formattedExample = formatCodeExample(originalExample);
      var lineNumber = 1;
      if (!formattedExample) {
       formattedExample = `There was an error transforming this example, please report this to https://github.com/Matthewacon/CX/issues`;
      } else {
       lineNumber = formattedExample
        .substring(0, formattedExample.indexOf("BEGIN EXAMPLE"))
        .split('\n')
        .length;
      }
      request.g[0].g[0].g[0].i.source = formattedExample;
      request.g[0].g[0].g[0].i.selection.startLineNumber = lineNumber;
      request.g[0].g[0].g[0].i.selection.positionLineNumber = lineNumber;
      request.g[0].g[0].g[0].i.selection.selectionStartLineNumber = lineNumber;
      request.g[0].g[0].g[0].i.selection.endLineNumber = lineNumber;

      const encodedRequest = `https://godbolt.org/e?hideEditorToolbars=true#${risonEncode(request)}`;

      //Add compiler explorer iframe
      $(parent)
       .parent('pre')
       .html(`<iframe id="godbolt-${index}" src=${encodedRequest}></iframe>`);
     });
    }
   });
 });
</script>
