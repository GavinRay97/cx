<!--JQuery-->
<script
 type="text/javascript"
 src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"
>
</script>

<!--Rison encoding/decoding to pass code to the compiler explorer embedded iframe-->
<script
 type="text/javascript"
 src="https://cdn.jsdelivr.net/gh/Nanonid/rison@917679fb6cafa15e2a186cd5a47163792899b321/js/rison.js"
>
</script>
<script type="text/javascript">
 function risonEncode(obj) {
  return rison.quote(rison.encode_object(obj));
 }

 function risonDecode(text) {
  return rison.decode_object(decodeURIComponent(text.replace(/\+/g, '%20')));
 }
</script>

<!--Force all tables to span the full page width-->
<style>
 table {
  width: 100%;
 }
</style>

<!--Styling for embedded complier explorer iframes-->
<style>
 #godbolt {
  position: relative;
  width: 100%;
  height: 400px;
 }
</style>

<!--Styling for added "Try it out" code buttons-->
<style>
 button[id^='code-button-'] {

 }
</style>

<!--Adds button to reveal embedded compiler explorer iframe-->
<script type="text/javascript">
 const godboltEmbeddedRequest = {
  "g": [
   {
    "g": [
     {
      "g": [
       {
        "h": "codeEditor",
        "i": {
         "fontScale": 11,
         "fontUsePx": "0",
         "j": 1,
         "lang": "c++",
         "selection": {
          "endColumn": 179,
          "endLineNumber": 1,
          "positionColumn": 179,
          "positionLineNumber": 1,
          "selectionStartColumn": 179,
          "selectionStartLineNumber": 1,
          "startColumn": 179,
          "startLineNumber": 1
         },
         "source": "REPLACEME"
        },
        "l": "5",
        "n": "0",
        "o": "C++ source #1",
        "t": "0"
       }
      ],
      "k": 50,
      "l": "4",
      "n": "0",
      "o": "",
      "s": 0,
      "t": "0"
     },
     {
      "g": [
       {
        "g": [
         {
          "h": "compiler",
          "i": {
           "compiler": "clang_trunk",
           "filters": {
            "b": "0",
            "binary": "1",
            "commentOnly": "0",
            "demangle": "0",
            "directives": "0",
            "execute": "0",
            "intel": "0",
            "libraryCode": "0",
            "trim": "1"
           },
           "fontScale": 11,
           "fontUsePx": "0",
           "j": 1,
           "lang": "c++",
           "libs": [],
           "options": "-std=c++20 -Wno-pragma-once-outside-header",
           "selection": {
            "endColumn": 1,
            "endLineNumber": 1,
            "positionColumn": 1,
            "positionLineNumber": 1,
            "selectionStartColumn": 1,
            "selectionStartLineNumber": 1,
            "startColumn": 1,
            "startLineNumber": 1
           },
           "source": 1
          },
          "l": "5",
          "n": "0",
          "o": "x86-64 clang (trunk) (Editor #1, Compiler #1) C++",
          "t": "0"
         }
        ],
        "k": 50,
        "l": "4",
        "m": 50,
        "n": "0",
        "o": "",
        "s": 0,
        "t": "0"
       },
       {
        "g": [
         {
          "h": "output",
          "i": {
           "compiler": 1,
           "editor": 1,
           "fontScale": 11,
           "fontUsePx": "0",
           "wrap": "1"
          },
          "l": "5",
          "n": "0",
          "o": "#1 with x86-64 clang (trunk)",
          "t": "0"
         }
        ],
        "header": {},
        "l": "4",
        "m": 50,
        "n": "0",
        "o": "",
        "s": 0,
        "t": "0"
       }
      ],
      "k": 50,
      "l": "3",
      "n": "0",
      "o": "",
      "t": "0"
     }
    ],
    "l": "2",
    "n": "0",
    "o": "",
    "t": "0"
   }
  ],
  "version": 4
 };
 $(function() {
  $('pre > div.buttons')
   .each(function(index) {
    const parent = this;
    //If the parent contains an adjacent `<area class="no-interactive-code">`
    //element, do not add a run button
    const shouldSkip = $(this)
     .parent('pre')
     .prev('p')
     .find('area#no-interactive-code')
     .length != 0;

    if (!shouldSkip) {
     //Add button
     const button = $(`<button class="fa fa-play play-button" title="Run this code" aria-label="Run this code" id="code-button-${index}"></button>`);
     button.appendTo(this);

     //Get code from code block
     var rawCode = $(parent)
      .parent('pre')
      .children('code')
      .text()
      .replace("\<cx\/", "<https://raw.githubusercontent.com/Matthewacon/CX/main/include/cx/");

     //If the code does not contain a main function, add it so the example will run
     const hasMain = /int\s+main(\s?)+\(/;
     if (!hasMain.test(rawCode)) {
      rawCode += '\nint main() {}\n';
     }

     //Encode code for godbolt request
     var request = godboltEmbeddedRequest;
     request.g[0].g[0].g[0].i.source = rawCode;

     const encodedRequest = `https://godbolt.org/e?hideEditorToolbars=true#${risonEncode(request)}`;

     //Add parent replacement on button click
     button.click(function() {
      $(parent)
       .parent('pre')
       .html(`<iframe id="godbolt" src=${encodedRequest}></iframe>`);
     });
    }
   });
 });
</script>
